import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.*;
import java.util.Arrays;

public class KasaProcessor {

    private KasaItem[] kasaItems;


    public void loadItems() {
        ClassLoader classLoader = this.getClass().getClassLoader();
        File file = new File(classLoader.getResource("kasa-items.json").getFile());

        ObjectMapper objectMapper = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        try (Reader reader = new FileReader(file)) {
            KasaItem[] items = objectMapper.readValue(reader, KasaItem[].class);

            int pocet = 0;

            for (KasaItem m : items) {

                int x = m.getCategory().length;

                for (int i = 0; i < x; i++) {

                    if (m.getCategory()[i].equals("Vestavné domácí spotřebiče" )) {
                        pocet++;
                    }
                }
            }
            System.out.println(pocet);


        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
    public void vypisNejlevnejsi(){

        ClassLoader classLoader = this.getClass().getClassLoader();
        File file = new File(classLoader.getResource("kasa-items.json").getFile());

        ObjectMapper objectMapper = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        try (Reader reader = new FileReader(file)) {
            KasaItem[] items = objectMapper.readValue(reader, KasaItem[].class);




      long[] pole = new long[items.length];
int y = 0;
       for (KasaItem m : items) {

           pole[y] = m.getCurrentPrice();
y ++;
       }


            Arrays.sort(pole);






            System.out.println(pole[pole.length-1]);
            int i = 0;
            for (int h = 0; h <2; h++) {



                for (KasaItem m : items) {
                    if (m.getCurrentPrice() == pole[i]) {

                        System.out.println(m.getItemName() + "       "+m.getCurrentPrice());
                    }

                }
                i++;
            }



        } catch(FileNotFoundException e){
            e.printStackTrace();
        } catch(IOException e){
            e.printStackTrace();
        }

    }


    public void loadCattegory(){

        ClassLoader classLoader = this.getClass().getClassLoader();
        File file = new File(classLoader.getResource("kasa-items.json").getFile());

        ObjectMapper objectMapper = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        try (Reader reader = new FileReader(file)) {
            KasaItem[] items = objectMapper.readValue(reader, KasaItem[].class);


            for (KasaItem m : items) {

                int x = m.getCategory().length;
                System.out.println("");
                for (int i = 0; i < x; i++) {

                    System.out.print(m.getCategory()[i]);
                }
            }


        } catch(FileNotFoundException e){
            e.printStackTrace();
        } catch(IOException e){
            e.printStackTrace();
        }
    }




    public void loadDiscountedItems() {

        ClassLoader classLoader = this.getClass().getClassLoader();
        File file = new File(classLoader.getResource("kasa-items.json").getFile());

        ObjectMapper objectMapper = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        try (Reader reader = new FileReader(file)) {
            KasaItem[] items = objectMapper.readValue(reader, KasaItem[].class);


            for (KasaItem m : items) {

                if(m.isDiscounted() == true){

                    System.out.println(m.getItemName());
                }
            }


            } catch(FileNotFoundException e){
                e.printStackTrace();
            } catch(IOException e){
                e.printStackTrace();
            }
        }

    }
